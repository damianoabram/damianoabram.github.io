---
---



@inproceedings{RSA:ADST21,
 abbr={CT-RSA},
  author    = {Damiano Abram and
               Ivan Damg{\aa}rd and
               Peter Scholl and
               Sven Trieflinger},
  editor    = {Kenneth G. Paterson},
  title     = {Oblivious {TLS} via Multi-party Computation},
  booktitle = {Topics in Cryptology - {CT-RSA} 2021 - Cryptographersâ€™ Track at the RSA Conference 2021.},
  series    = {Lecture Notes in Computer Science},
  volume    = {12704},
  pages     = {51--74},
  publisher = {Springer},
  year      = {2021},
  url       = {https://doi.org/10.1007/978-3-030-75539-3\_3},
  doi       = {10.1007/978-3-030-75539-3\_3},
  timestamp = {Tue, 11 May 2021 14:54:39 +0200},
  pdf    = {https://eprint.iacr.org/2021/318},
  abstract ={In this paper, we describe Oblivious TLS: an MPC protocol that we prove UC secure against a majority of actively corrupted parties. The protocol securely implements TLS 1.3. Thus, any party $P$ who runs TLS can communicate securely with a set of servers running Oblivious TLS; $P$ does not need to modify anything, or even be aware that MPC is used.
Applications of this include communication between servers who offer MPC services and clients, to allow the clients to easily and securely provide inputs or receive outputs. Also, an organization could use Oblivious TLS to improve in-house security while seamlessly connecting to external parties.
Our protocol runs in the preprocessing model, and we did a preliminary non-optimized implementation of the on-line phase. In this version, the hand-shake completes in about 1 second. Performance of the record protocol depends, of course, on the encryption scheme used. We designed an MPC friendly scheme which achieved a throughput of about 300 KB/sec. Based on implementation results from other work, the standard AES-GCM can be expected to be as fast, although our implementation did not do as well.},
}

@inproceedings{PKC:AbrSch22,
abbr={PKC},
  author    = {Damiano Abram and
               Peter Scholl},
  editor    = {Goichiro Hanaoka},
  title     = {{Low-Communication Multiparty Triple Generation for SPDZ from Ring-LPN}},
 booktitle="Public-Key Cryptography -- PKC 2022.",
  publisher = {Springer},
  year      = {2022},
  abstract={The SPDZ protocol for multi-party computation relies on a correlated randomness setup consisting of authenticated, multiplication triples. A recent line of work by Boyle et al. (Crypto 2019, Crypto 2020) has investigated the possibility of producing this correlated randomness in a silent preprocessing phase, which involves a ``small'' setup protocol with less communication than the total size of the triples being produced. These works do this using a tool called a pseudorandom correlation generator (PCG), which allows a large batch of correlated randomness to be compressed into a set of smaller, correlated seeds. However, existing methods for compressing SPDZ triples only apply to the 2-party setting.
  In this work, we construct a PCG for producing SPDZ triples over large prime fields in the multi-party setting. The security of our PCG is based on the ring-LPN assumption over fields, similar to the work of Boyle et al. (Crypto 2020) in the 2-party setting. We also present a corresponding, actively secure setup protocol, which can be used to generate the PCG seeds and instantiate SPDZ with a silent preprocessing phase. As a building block, which may be of independent interest, we construct a new type of 3-party distributed point function supporting outputs over arbitrary groups (including large prime order), as well as an efficient protocol for setting up our DPF keys with active security.},
}


@inproceedings{EC:AbrSchYak22,
abbr = {EC},
  author    = {Damiano Abram and
               Peter Scholl and
               Sophia Yakoubov},
  title     = {{Distributed (Correlation) Samplers: How to Remove a Trusted Dealer in One Round}},
  booktitle="EUROCRYPT 2022.",
  publisher = {Springer},
  year      = {2022},
  abstract={Structured random strings (SRSs) and correlated randomness are important for many cryptographic protocols. In settings where interaction is expensive, it is desirable to obtain such randomness in as few rounds of communication as possible; ideally, simply by exchanging one reusable round of messages which can be considered public keys.
In this paper, we describe how to generate any SRS or correlated randomness in such a single round of communication, using, among other things, indistinguishable obfuscation. We introduce what we call a distributed sampler, which enables n parties to sample a single public value (SRS) from any distribution. We construct a semi-malicious distributed sampler in the plain model, and use it to build a semi-malicious publickey PCF (Boyle et al., FOCS 2020) in the plain model. A public-key PCF can be thought of as a distributed correlation sampler; instead of producing a public SRS, it gives each party a private random value (where the values satisfy some correlation).
We introduce a general technique called an anti-rusher which compiles any one-round protocol with semi-malicious security without inputs to a similar one-round protocol with active security by making use of a programmable random oracle. This gets us actively secure distributed samplers and public-key PCFs in the random oracle model.
Finally, we explore some tradeoffs. Our first PCF construction is limited to reverse-sampleable correlations (where the random outputs of honest parties must be simulatable given the random outputs of corrupt parties); we additionally show a different construction without this limitation, but which does not allow parties to hold secret parameters of the correlation.
We also describe how to avoid the use of a random oracle at the cost of relying on sub-exponentially secure indistinguishability obfuscation.},
}

